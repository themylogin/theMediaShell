#!/usr/bin/env python2
# -*- coding: utf-8 -*-
if __name__ == "__main__":
    import glob, math, os, os.path, PIL, PIL.ImageStat, re, subprocess, sys, tempfile

    filename = sys.argv[1]
    start = int(sys.argv[2])
    end = int(sys.argv[3])

    title = os.path.basename(filename)
    download = int(os.stat(filename).st_mtime)

    i = 1
    length =  int(re.search(r"ID_LENGTH=([0-9]+)", subprocess.check_output(["mplayer", "-ao", "null", "-vc", ",", "-vo", "null", "-frames", "0", "-identify", filename], stderr=subprocess.STDOUT)).group(1))
    for ss in range(length / 5 + 1, length, length / 5 + 1):
        tmp_dir = str(tempfile.mkdtemp())

        subprocess.call(["mplayer", "-ss", str(ss), "-nosound", "-vc", ",", "-vo", "jpeg:outdir=" + tmp_dir, "-frames", "50", filename])

        max_brightness = -1
        max_brightness_image = None
        for image in glob.glob(os.path.join(tmp_dir, "0000*.jpg")):
            r, g, b = PIL.ImageStat.Stat(PIL.Image.open(image)).mean
            brightness = math.sqrt(0.241 * (r ** 2) + 0.691 * (g ** 2) + 0.068 * (b ** 2))
            if brightness > max_brightness:
                max_brightness = brightness
                max_brightness_image = image

        subprocess.call(["scp", max_brightness_image, "themylogin@192.168.0.1:/home/themylogin/www/thelogin.ru/data/movies/\"%(title)s.%(i)d.jpg\"" % {
            "title" : title,
            "i"     : i,
        }])

        for image in glob.glob(os.path.join(tmp_dir, "0000*.jpg")):
            os.unlink(image)

        i += 1

    #
    import simplejson
    from datetime import datetime
    from sqlalchemy import create_engine
    from sqlalchemy.orm import sessionmaker, scoped_session

    session_factory = scoped_session(sessionmaker(bind=create_engine('mysql://theMplayerShell:theMplayerShell@192.168.0.1/themylogin_thelogin?charset=utf8'), autocommit=True))
    session = session_factory()

    session.execute("""
        INSERT INTO content_item
        (type, type_key, started_at, created_at, permissions, data)
        VALUES
        (:type, :type_key, :started_at, :created_at, 0, :data)
    """, params={
        "type"      : "movie",
        "type_key"  : end,
        "started_at": datetime.fromtimestamp(start).strftime("%Y-%m-%d %H:%M:%S"),
        "created_at": datetime.fromtimestamp(end).strftime("%Y-%m-%d %H:%M:%S"),
        "data"      : simplejson.dumps({ "title" : title, "download" : download })
    })
